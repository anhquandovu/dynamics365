class QD_GenerateLedgerDimensionAccount
{        
    /// <summary>
    /// Runable job to generate Ledger Dimension Account
    /// 1. Input: Main Account, container of Dimension Value
    /// 2. Process: 
    ///       a. Get Account structure from Main Account
    ///       b. Get Dimension Hierarchy Level and Names from Account Structure
    ///       c. For each [Hierarchy Level - Dimension Value]: Get DimensionAttributeValue
    ///       d. Add to DimensionAttributeValueContract
    ///       e. Get DimensionAttributeValueCombination table record from the Contract
    /// 3. Return: DimensionAttributeValueCombination Record and DisplayValue
    /// </summary>
    public static void main(Args _args)
    {        
        int hierarchyCount;
        int hierarchyIdx;
        RecId dimAttId_MainAccount;

        LedgerRecId ledgerRecId;
        MainAccount mainAccount;
        RefRecId recordvalue;
        DimensionAttribute dimensionAttribute;
        DimensionAttributeValue dimensionAttributeValue;
        DimensionSetSegmentName DimensionSet;
        DimensionStorage dimStorage;
        LedgerAccountContract LedgerAccountContract = new LedgerAccountContract();
        DimensionAttributeValueContract ValueContract;
        List valueContracts = new List(Types::Class);
        dimensionAttributeValueCombination dimensionAttributeValueCombination;

        //MainAccount: <Get from parameter>, Business Unit: 005, Department: 024
        container _conData = [" ", "005", "024"];

        //Main account: "170150": "Good will"
        mainAccount = MainAccount::findByMainAccountId('170150');
        
        //Get Account Structure setup from a main Account: Return a RecId
        recordvalue = DimensionHierarchy::getAccountStructure(mainAccount.RecId,Ledger::current());
        
        //Get Dimension Hierarchy Level: E.g. 3
        hierarchyCount = DimensionHierarchy::getLevelCount(recordvalue);
        
        //Get Dimension HierarchyLevel Names: E.g. MainAccount-BusinessUnit-Department
        DimensionSet = DimensionHierarchyLevel::getDimensionHierarchyLevelNames(recordvalue);

        //
        for(hierarchyIdx = 1;hierarchyIdx<=hierarchyCount;hierarchyIdx++)
        {
            if(hierarchyIdx == 1)
                continue;
            dimensionAttribute = DimensionAttribute::findByLocalizedName(DimensionSet[hierarchyIdx],false,"en-us");
            if(dimensionAttribute)
            {
                //Get DimensionAttributeValue record from passed Attribute & Value: (E.g. Attribute: "BusinessUnit", Value: "005")
                dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute,conPeek(_conData,hierarchyIdx));
                
                //Add to DimAttrValueContract
                if(dimensionAttributeValue)
                {
                    ValueContract = new DimensionAttributeValueContract();
                    ValueContract.parmName(dimensionAttribute.Name) ;
                    ValueContract.parmValue(dimensionAttributeValue.CachedDisplayValue);
                    valueContracts.addEnd(ValueContract);
                }
            }
        }
        
        LedgerAccountContract.parmMainAccount('170150');
        LedgerAccountContract.parmValues(valueContracts);
        
        //Build dimension storage from LedgerAccountContract
        dimStorage = DimensionServiceProvider::buildDimensionStorageForLedgerAccount(LedgerAccountContract);
        
        //Get DimensionAttributeValueCombination Record
        dimensionAttributeValueCombination = DimensionAttributeValueCombination::find(dimStorage.save());
        ledgerRecId = dimensionAttributeValueCombination.RecId;
        
        info(strfmt("%1 & %2", ledgerRecId, dimensionAttributeValueCombination.DisplayValue));
    }

}
